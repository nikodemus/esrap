\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename esrap.info
@settitle Esrap
@c %**end of header

@settitle Esrap

@c for install-info
@dircategory Software development
@direntry
* Esrap:           a packrat parser for Common Lisp
@end direntry

@titlepage

@title Esrap
@subtitle a packrat parser for Common Lisp

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

In addition to regular Packrat / Parsing Grammar / TDPL features Esrap
supports dynamic redefinition of nonterminals, inline grammars,
semantic predicates, and include introspecive facilities for
development.

Esrap is maintained courtesy of @url{http://sb-studio.net/, Steel Bank
Studio Ltd} by @email{nikodemus@@sb-studio.net, Nikodemus Siivola}.

Esrap is maintained in Git:
@example
git clone git://github.com/nikodemus/esrap.git
@end example
will get you a local copy.
@example
@url{http://github.com/nikodemus/esrap}
@end example
is the GitHub project page.

Esrap is licenced under an MIT-style licence.

For more on packrat parsing, see
@url{http://pdos.csail.mit.edu/~baford/packrat/thesis/} for Bryan Ford's 2002
thesis: ``Packrat Parsing: a Practical Linear Time Algorithm with Backtracking''.

@contents

@ifnottex

@include include/ifnottex.texinfo

@end ifnottex

@chapter Parsing Expressions

Parsing proceeds by matching text against parsing expressions.
Matching has three components: success vs failure, consumption of
input, and associated production.

Parsing expressions that fail never consume input. Parsing expressions
that succeed may or may not consume input.

A parsing expressions can be:

@heading Terminal
A terminal is a character or a string of length one, which succeeds and
consumes a single character if that character matches the terminal.

Additionally, Esrap supports some pseudoterminals.

@itemize
@item
The wild terminal symbol @code{character} always succeeds, consuming
and producing a single character.
@item
Expressions of the form @code{(character-ranges range ...)} match a
single character from the given range(s), consuming and producing that
character. A range is can be either a list of the form
@code{(#\start_char #\stop_char)} or a single character.
@item
Multicharacter strings can be used to specify sequences of terminals:
@code{"foo"} succeeds and consumes input as if @code{(and #\f #\o
#\o)}. Produces the consumed string.
@item
Expressions of the form @code{(string length)} can be used to specify
sequences of arbitrary characters: @code{(string 2)} succeeds and
consumes input as if @code{(and character character)}. Produces the
consumed string.
@end itemize

@heading Nonterminal
Nonterminals are specified using symbols. A nonterminal symbol
succeeds if the parsing expression associated with it succeeds, and
consumes whatever the input that expression consumes.

The production of a nonterminal depends on the associated expression
and an optional transformation rule.

Nonterminals are defined using @code{defrule}.

@heading Sequence
@lisp
(and subexpression ...)
@end lisp

A sequence succeeds if all subexpressions succeed, and consumes all
input consumed by the subexpressions. A sequence produces the
productions of its subexpressions as a list.

@heading Ordered Choice
@lisp
(or subexpression ...)
@end lisp

An ordered choice succeeds if any of the subexpressions succeeds, and
consumes all the input consumed by the successful subexpression. An
ordered choice produces whatever the successful subexpression
produces.

Subexpressions are checked strictly in the specified order, and once
a subexpression succeeds no further ones will be tried.

@heading Negation
@lisp
(not subexpression)
@end lisp

A negation succeeds if the subexpression fails, and consumes one character
of input. A negation produces the character it consumes.

@heading Greedy Repetition
@lisp
(* subexpresssion)
@end lisp

A greedy repetition always succeeds, consuming all input consumed by
applying subexpression repeatedly as long as it succeeds.

A greedy repetition produces the productions of the subexpression as a
list.

@heading Greedy Positive Repetition
@lisp
(+ subexpresssion)
@end lisp

A greedy repetition succeeds if subexpression succeeds at least once,
and consumes all input consumed by applying subexpression repeatedly
as long as it succeeds. A greedy positive repetition produces the
productions of the subexpression as a list.

@heading Optional
@lisp
(? subexpression)
@end lisp

Optionals always succeed, and consume whatever input the subexpression
consumes. An optional produces whatever the subexpression produces, or
@code{nil} if the subexpression does not succeed.

@heading Followed-By Predicate
@lisp
(& subexpression)
@end lisp

A followed-by predicate succeeds if the subexpression succeeds, and
@emph{consumes no input}. A followed-by predicate produces whatever
the subexpression produces.

@heading Not-Followed-By Predicate
@lisp
(! subexpression)
@end lisp

A not-followed-by predicate succeeds if the subexpression does not
succeed, and @emph{consumes no input}. A not-followed-by predicate
produces @code{nil}.

@heading Semantic Predicates
@lisp
(predicate-name subexpression)
@end lisp

The @code{predicate-name} is a symbol naming a global function. A
semantic predicate succeeds if subsexpression succeeds @emph{and} the
named function returns true for the production of the subexpression. A
semantic predicate produces whatever the subexpression produces.

@emph{Note: semantic predicates may change in the future to produce
whatever the predicate function returns.}

@chapter Grammars

Esrap uses grammar objects to organize sets of rules into reusable
units. Grammar objects are similar to Common Lisp packages in that they
consist of
@enumerate

@item A name

@item A set of used grammars

@item A set of rules

@item An optional documentation string

@end enumerate

Similarly to Common Lisp packages, when one grammar uses another
grammar, the rules of the used grammar are available as nonterminals in
rules of the using grammar. However, there are no explicit exported
rules or name conflicts since rules are named by symbols and can thus
leverage the mechanisms already provided by the package system.

Redefinitions or grammars and rules are tracked across grammar
dependencies in order always ensure a consistent state.

@emph{Note: since some of these updates are rather complex, bugs should
be expected and reported, when encountered.}

@chapter Dictionary

@section Primary Interface

@heading Grammar Objects

@include include/macro-esrap-defgrammar.texinfo

@include include/var-esrap-star-grammar-star.texinfo
@include include/macro-esrap-in-grammar.texinfo

@heading Rules

@include include/macro-esrap-defrule.texinfo
@include include/fun-esrap-parse.texinfo
@include include/fun-esrap-describe-grammar.texinfo

@section Utilities

@include include/fun-esrap-text.texinfo

@section Grammar Introspection and Intercession

@include include/fun-esrap-grammar-name.texinfo
@include include/fun-esrap-grammar-dependencies.texinfo
@include include/fun-esrap-grammar-rules.texinfo

@include include/fun-esrap-find-grammar.texinfo
@include include/fun-esrap-setf-find-grammar.texinfo
@include include/fun-esrap-make-grammar.texinfo

@section Rule Introspection and Intercession

@include include/fun-esrap-rule-symbol.texinfo
@include include/fun-esrap-rule-dependencies.texinfo
@include include/fun-esrap-rule-expression.texinfo
@include include/fun-esrap-setf-rule-expression.texinfo

@include include/fun-esrap-find-rule.texinfo
@include include/fun-esrap-add-rule.texinfo
@include include/fun-esrap-remove-rule.texinfo
@include include/fun-esrap-change-rule.texinfo

@include include/fun-esrap-trace-rule.texinfo
@include include/fun-esrap-untrace-rule.texinfo

@section Error Conditions

@include include/condition-esrap-grammar-not-found-error.texinfo
@include include/condition-esrap-grammar-not-found-warning.texinfo

@include include/condition-esrap-rule-not-found-error.texinfo
@include include/condition-esrap-rule-not-found-warning.texinfo

@include include/condition-esrap-invalid-expression-error.texinfo
@include include/condition-esrap-invalid-expression-warning.texinfo

@include include/condition-esrap-esrap-error.texinfo
@include include/condition-esrap-left-recursion.texinfo

@bye
