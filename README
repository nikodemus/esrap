ESRAP -- a packrat parser for Common Lisp

In addition to regular Packrat / Parsing Grammar / TDPL features ESRAP
supports:

 - dynamic redefinition of nonterminals
 - inline grammars
 - semantic predicates
 - introspective facilities (describing grammars, tracing, setting breaks)

Homepage & Documentation:

  http://nikodemus.github.com/esrap/

References:

  * Bryan Ford, 2002, "Packrat Parsing: a Practical Linear Time
    Algorithm with Backtracking".

    http://pdos.csail.mit.edu/~baford/packrat/thesis/

Licence:

 Copyright (c) 2007-2013 Nikodemus Siivola <nikodemus@random-state.net.net>

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation files
 (the "Software"), to deal in the Software without restriction,
 including without limitation the rights to use, copy, modify, merge,
 publish, distribute, sublicense, and/or sell copies of the Software,
 and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Syntax overview:

 <literal>                 -- case-sensitive terminal
 (~ <literal>)             -- case-insensitive terminal
 character                 -- any single character
 (string length)           -- any string of length
 (not expression)          -- complement of expression
 (character-ranges ranges) -- character ranges
 (and &rest sequence)
 (or &rest ordered-choices)
 (* [[from] to] greedy-repetition)
 (+ greedy-positive-repetition)
 (? optional)
 (& followed-by)           -- does not consume
 (-> followed-by-not-gen)  -- does not consume, produces NIL
 (<- preceded-by-not-gen)  -- succeeds, if preceeded by something of length 1, produces NIL
 (! not-followed-by)       -- does not consume
 (cond &rest clauses)      -- very analogous to CL's cond statement
 (first expr)              -- results in CAR of EXPR, if EXPR parses successfully
 (tag tag-kwd expr)        -- on the fly tagging of expression
 (<predicate> expr)        -- semantic parsing

 FROM and TO in (* ...) form may be arbitrary forms (e.g. special variables), but use with caution -
 feature is experimental and probably does not handle local environment correctly.

 Each clause in COND form is of the form (PREDICATE-SUBEXPR VALUE-SUBEXPR). Clauses are executed in order.
 First clause, for which PREDICATE-SUBEXPR succeeds and VALUE-SUBEXPR also succeeds, leads VALUE-SUBEXPR.
 Tag-clause succeeds, whenever EXPR succeeds, and leads `(,TAG-KWD ,EXPR). It is useful to track, which
 alternative of the ordered choice, indeed, realized, like that:

 (or (tag :simple simple-string)
     (tag :complex complex-string))

 without the need of introduction two additional named rules TAGGED-SIMPLE-STRING and TAGGED-COMPLEX-STRING.

 See file example-sexp.lisp for a complete sample grammar and usage,
 example-symbol-table.lisp for a grammar with lexical scope,
 example-very-context-sensitive.lisp for more complex example of context-sensitive grammar,
 and tests.lisp for various rather trivial use-cases.
 Also, package CL-YACLYAML uses all advanced facilities of this parser-generator extensively - so, see code there for
 real-life examples.

Trivial examples:

 ;; Parse takes a expression
 (parse '(or "foo" "bar") "foo")         => "foo", NIL

 ;; New rules can be added.
 ;;
 ;; Normally you'd use the declarative DEFRULE interface to define new
 ;; rules, but everything it does can be done directly by building
 ;; instances of the RULE class and using ADD-RULE to activate them.
 (add-rule 'foo+ (make-instance 'rule :expression '(+ "foo"))) => FOO+

 (parse 'foo+ "foofoofoo")               => ("foo" "foo" "foo"), NIL

 ;; Rules can transform their matches.
 (add-rule 'decimal
           (make-instance 'rule
            :expression '(+ (or "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))
            :transform (lambda (list start end)
                         (declare (ignore start end))
                         (parse-integer (format nil "~{~A~}" list)))))
  => DECIMAL

 ;; Any lisp function can be used as a semantic predicate.
 (parse '(oddp decimal) "123")                  => 123

 (parse '(evenp decimal) "123" :junk-allowed t) => NIL, 0
